<pattern-file>
  <meta>
    <pattern-id>async-context-manager-pattern</pattern-id>
    <source>doc/claude-test-brain.xml</source>
    <version>1.3</version>
  </meta>
  <pattern>
      <name>Testing Async Context Managers</name>
      <when>Testing rate limiters, connection pools, resource managers with __aenter__/__aexit__</when>
      <complete-example>
        <file>tests/test_batch_processor.py</file>
        <code>
import pytest
import asyncio
from src.ecreshore.services.batch_processor import AsyncRateLimiter

@pytest.mark.asyncio
async def test_rate_limiter_basic_functionality():
    """Test basic async rate limiter functionality."""
    limiter = AsyncRateLimiter(max_concurrent=2, min_interval=0.01)

    # Test async context manager protocol
    async with limiter:
        # Inside context, permit is acquired
        assert True  # Permit held
    # Permit automatically released on exit

    # Test manual acquire/release
    await limiter.acquire()
    # Permit acquired
    limiter.release()
    # Permit released

@pytest.mark.asyncio
async def test_rate_limiter_minimum_interval():
    """Test rate limiter enforces minimum interval."""
    limiter = AsyncRateLimiter(max_concurrent=1, min_interval=0.1)

    import time
    start_time = time.time()

    # First acquire should be immediate
    await limiter.acquire()
    first_acquire_time = time.time()
    limiter.release()

    # Second acquire should wait for minimum interval
    await limiter.acquire()
    second_acquire_time = time.time()
    limiter.release()

    # Verify minimum interval was enforced
    interval = second_acquire_time - first_acquire_time
    assert interval &gt;= 0.1, f"Interval was {interval}, expected &gt;= 0.1"

@pytest.mark.asyncio
async def test_rate_limiter_exception_handling():
    """Test that rate limiter releases permit on exception."""
    limiter = AsyncRateLimiter(max_concurrent=1, min_interval=0.01)

    try:
        async with limiter:
            raise ValueError("Test exception")
    except ValueError:
        pass

    # Verify permit was released despite exception
    # Should be able to acquire immediately
    async with limiter:
        assert True
</code>
      </complete-example>
      <critical-rules>
        <rule>Test both async with and manual acquire/release</rule>
        <rule>Test exception handling (resource cleanup)</rule>
        <rule>Use time.time() to verify timing constraints</rule>
        <rule>Verify permits are released on exception</rule>
      </critical-rules>
    </pattern>
</pattern-file>
